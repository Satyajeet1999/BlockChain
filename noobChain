A blockchain is just a chain/list of blocks. 
Each block in the blockchain will have its own digital fingerprint,
contain digital fingerprint of the previous block, and have some data
 
 Hash = Digital Fingerprint.
 
 Each block doesn’t just contain the hash of the block before it, but its own hash is in part, calculated from the previous hash.
 If the previous block’s data is changed then the previous block’s hash will change ( since it is calculated in part, by the data)
 in turn affecting all the hashes of the blocks there after.
 Calculating and comparing the hashes allow us to see if a blockchain is invalid.
 
 What does this mean ? …Changing any data in this list, will change the signature and break the chain.
 
 refer Block.java code
 
 As you can see our basic Block contains a String hash that will hold our digital signature.
  The variable previousHash to hold the previous block’s hash andString data to hold our block data.
  
  *****************************
  
  Next we will need a way to generate a digital fingerprint,
there are many cryptographic algorithms you can choose from,
 however  - SHA256 fits -  just fine for this example. We can import java.security.MessageDigest;
  to get access to the SHA256 algorithm.
  
  We need to use SHA256 later down the line so lets create a handy helper method in a new StringUtil ‘utility’ class :
  refer StringUtil Class
  
  Don’t worry too much if you don’t understand the contents of this helper method,
   all you need to know is that it takes a string and applies SHA256 algorithm to it,
    and returns the generated signature as a string.
    
 ****************************************
 Now lets use our applySha256 helper, in a new method in the Block class, to calculate the hash.
  We must calculate the hash from all parts of the block we don’t want to be tampered with.
   So for our block we will include the previousHash, the data and timeStamp.
   
*************************************************
Time for some testing…
In our main NoobChain class lets create some blocks and print the hashes to the screen
 to see that everything is in working order.
 
 The first block is called the genesis block,
  and because there is no previous block we will just enter “0” as the previous hash.
  
  The output should look similar to this:
  
Hash for Block 1 : 61482ea4245bead59e9096366360d947da42624a5be1b0f0adc3e963737db739
Hash for Block 2 : ad44498b98025381098f5a1f90b12064abf14ee7649ab3a8220879231893d093
Hash for block 3 : c0ebf76a98ff069db6e006ea28ce1c34cb84fada34d45628e4da99bf9259a019

Each block now has its own digital signature based on its information and the signature of the previous block.

Currently it’s not much of a blockchain, so lets store our blocks in an ArrayList and also import gson to view it as Json.

********************************************
---------------What is GSON.------------
Gson is Java library created by google that enables you to get a JSON representation of a Java Object. Read more about it here.

---------------Downloading GSON.------------
You will need to download Gson Jar ( “gson-2.6.2.jar” ) from the maven repo. Make sure to keep a note of where you saved it.

Right click your package in package explorer > Build path > Add Libraries. Select User libraries and then press next, now just tick “gson_lib” and click finish.

Import it with import com.google.gson.*;

***********************************************

Now we need a way to check the integrity of our blockchain.
Lets create an isChainValid() Boolean method in the NoobChain class,
 that will loop through all blocks in the chain and compare the hashes.
  This method will need to check the hash variable is actually equal to the calculated hash,
   and the previous block’s hash is equal to the previousHash variable.
   
   Any change to the blockchain’s blocks will cause this method to return false.

On the bitcoin network nodes share their blockchains and the longest valid chain is accepted by the network.
 What’s to stop someone tampering with data in an old block then creating a whole new longer blockchain and presenting that to the network ? Proof of work.
 The hashcash proof of work system means it takes considerable time and computational power to create new blocks. 
 Hence the attacker would need more computational power than the rest of the peers combined.
 
 
 ******************************************************
 
 Lets start mining blocks !!!
We will require miners to do proof-of-work by trying different variable values in the block until its hash starts with a certain number of 0’s.

Lets add an int called nonce to be included in our calculateHash() method, and the much needed mineBlock() method :

The mineBlock() method takes in an int called difficulty, this is the number of 0’s they must solve for. 
Low difficulty like 1 or 2 can be solved nearly instantly on most computers, i’d suggest something around 4–6 for testing. 
At the time of writing Litecoin’s difficulty is around 442,592.

Lets add the difficulty as a static variable to the NoobChain class :
public static int difficulty = 5;
We should update the NoobChain class to trigger the mineBlock() method for each new block. 
The isChainValid() Boolean should also check if each block has a solved ( by mining ) hash.

*************************************************************

Mining each block took some time! ( around 3 seconds ) You should mess around with the difficulty value to see how that effects the time it takes to mine each block ;)

If someone were to tamper 😒 with the data in your blockchain system:

Their blockchain would be invalid.
They would not be able to create a longer blockchain.
Honest blockchains in your network will have a time advantage on the longest chain.
A tampered blockchain will not be able to catch up with a longer & valid chain. *

*unless they have vastly more computation speed than all other nodes in your network combined. A future quantum computer or something.

You’re all done with your basic blockchain!

Your blockchain:
> Is made up of blocks that store data.
> Has a digital signature that chains your blocks together.
> Requires proof of work mining to validate new blocks.
> Can be check to see if data in it is valid and unchanged.


  
  